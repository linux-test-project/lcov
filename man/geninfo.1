\" Define path to scripts
.ds scriptdir bin

\" Define project URL
.ds lcovurl https://github.com/linux\-test\-project/lcov

.TH geninfo 1 "LCOV 2.0" 2023\-05\-17 "User Manuals"
.SH NAME
geninfo \- Generate tracefiles from GCOV coverage data files
.SH SYNOPSIS
.B geninfo
.RB [ \-h | \-\-help ]
.RB [ \-\-version ]
.RB [ \-q | \-\-quiet ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-debug ]
.br
.RS 8
.RB [ \-\-comment
.IR comment-string ]
.br
.RB [ \-i | \-\-initial ]
.RB [ \-\-all ]
.br
.RB [ \-t | \-\-test\-name
.IR test\-name ]
.br
.RB [ \-o | \-\-output\-filename
.IR filename ]
.RB [ \-f | \-\-follow ]
.br
.RB [ \-b | \-\-base\-directory
.IR directory ]
.br
.RB [ \-\-build\-directory
.IR directory ]
.br
.RB [ \-\-branch\-coverage ]
.br
.RB [ \-\-mcdc\-coverage ]
.br
.RB [ \-\-checksum ]
.RB [ \-\-no\-checksum ]
.br
.RB [ \-\-compat\-libtool ]
.RB [ \-\-no\-compat\-libtool ]
.br
.RB [ \-\-gcov\-tool
.IR tool  ]
.br
.RB [ \-\-parallel | -j
.IR [integer] ]
.br
.RB [ \-\-memory
.IR integer_num_Mb ]
.br
.RB [ \-\-msg\-log
.IR [ log_file_name ] ]
.br
.RB [ \-\-ignore\-errors
.IR errors ]
.br
.RB [\-\-expect\-message\-count
.IR message_type=expr[,message_type=expr..]]
.br
.RB [ \-\-keep\-going ]
.br
.RB [ \-\-preserve ]
.br
.RB [ \-\-filter
.IR type  ]
.br
.RB [ \-\-demangle\-cpp [param]]
.br
.RB [ \-\-no\-recursion ]
.RB [ \-\-external ]
.RB [ \-\-no\-external ]
.br
.RB [ \-\-config\-file
.IR config\-file ]
.RB [ \-\-no\-markers ]
.br
.RB [ \-\-profile
.IR [ profile\-file ] ]
.br
.RB [ \-\-derive\-func\-data ]
.RB [ \-\-compat
.IR  mode =on|off|auto]
.br
.RB [ \-\-rc
.IR keyword = value ]
.br
.RB [ \-\-include
.IR glob_pattern ]
.br
.RB [ \-\-exclude
.IR glob_pattern ]
.br
.RB [ \-\-erase\-functions
.IR regexp_pattern ]
.br
.RB [ \-\-substitute
.IR regexp_pattern ]
.br
.RB [ \-\-omit\-lines
.IR regexp_pattern ]
.br
.RB [ \-\-fail\-under\-branches
.IR percentage ]
.br
.RB [ \-\-fail\-under\-lines
.IR percentage ]
.br
.RB [ \-\-forget\-test\-names ]
.br
.RB [ \-\-context\-script
.IR script_file  ]
.br
.RB [ \-\-criteria\-script
.IR script_file  ]
.br
.RB [ \-\-resolve\-script
.IR script_file  ]
.br
.RB [ \-\-version\-script
.IR script_file  ]
.br
.RB [ \-\-tempdir
.IR dirname  ]
.br
.IR directory
.RE

.SH DESCRIPTION

Use
.B geninfo
to create LCOV tracefiles from GCC and LLVM/Clang coverage data files (see
.B --gcov-tool
for considerations when working with LLVM). You can use
.B genhtml
to create an HTML report from a tracefile.
.br

Note that
.B geninfo
is called by
.BR "lcov --capture" ,
so there is typically no need to call it directly.
.br

Unless the
.B --output-filename
option is specified
.B geninfo
writes its output to one file with .info filename extension per input file.
.br

Note also that the current user needs write access to both
.I directory
as well as to the original source code location. This is necessary because some temporary files have to be created there during the conversion process.
.br

By default,
.B geninfo
collects line and function coverage data.
Neither branch nor MC/DC data is not collected by default; you can use the
.B \-\-branch\-coverage
and
.B \-\-mcdc\-coverage
command line options to enable them, or you can permanently enable them by adding
.B branch_coverage = 1
and/or
.B mcdc_coverage = 1
to your personal, group, or site lcov configuration file.  See man
.B lcovrc(5)
for details.


.SS "File types"

A
.B tracefile
is a coverage data file in the format used by all LCOV tools such as
.BR geninfo ", " lcov ", and " genhtml .
By convention, tracefiles have a .info filename extension. See "Tracefile format" below for a description of the file format.
.br

A
.B .gcda file
is a compiler-specific file containing run-time coverage data. It is created and updated when a program compiled with GCC/LLVM's
.B --coverage
option is run to completion.
.B geninfo
reads .gcda files in its default mode of operation. Note: earlier compiler versions used the .da filename extension for this file type.
.br

A
.B .gcno file
is a compiler-specific file containing static, compile-time coverage data. It is created when source code is compiled with GCC/LLVM's
.B --coverage
option.
.B geninfo
reads .gcno files when option
.B --initial
is specified. Note: earlier compiler versions used .bb and .bbg filename extensions for this file type.
.br

A
.B .gcov file
is a textual or JSON representation of the data found in .gcda and .gcno files. It is created by the
.BR gcov
tools that is part of GCC (see
.B --gcov-tool
for LLVM considerations).
There are multiple gcov file format versions, including textual, intermediate, and JSON format.
.B geninfo
internally uses
.B gcov
to extract coverage data from .gcda and .gcno files using the best supported gcov file format.
.br

See the
.B gcov
man page for more information on .gcda, .gcno and .gcov output formats.
.br

.SS "Exclusion markers"

To exclude specific lines of code from a tracefile, you can add exclusion
markers to the source code. Additionally you can exclude specific branches from
branch coverage without excluding the involved lines from line and function
coverage. Exclusion markers are keywords which can for example be added in the
form of a comment.
See man
.BR lcovrc (5)
how to override some of them.

The following markers are recognized by geninfo:

.B LCOV_EXCL_LINE
.br
.RS
Lines containing this marker will be excluded.
.br
.RE

.B LCOV_EXCL_START
.br
.RS
Marks the beginning of an excluded section. The current line is part of this
section.
.br
.RE

.B LCOV_EXCL_STOP
.br
.RS
Marks the end of an excluded section. The current line not part of this
section.
.br
.RE

.B LCOV_EXCL_BR_LINE
.br
.RS
Lines containing this marker will be excluded from branch coverage.
.br
.RE

.B LCOV_EXCL_BR_START
.br
.RS
Marks the beginning of a section which is excluded from branch coverage. The
current line is part of this section.
.br
.RE

.B LCOV_EXCL_BR_STOP
.br
.RS
Marks the end of a section which is excluded from branch coverage. The current
line not part of this section.
.br
.RE

.B LCOV_EXCL_EXCEPTION_BR_LINE
.br
.RS
Lines containing this marker will be excluded from exception branch coverage:
Exception branches will be ignored, but non-exception branches will not be
affected.
.br
.RE

.B LCOV_EXCL_EXCEPTION_BR_START
.br
.RS
Marks the beginning of a section which is excluded from exception branch
coverage. The current line is part of this section.
.br
.RE

.B LCOV_EXCL_EXCEPTION_BR_STOP
.br
.RS
Marks the end of a section which is excluded from exception branch coverage.
The current line not part of this section
.br
.RE

.SH OPTIONS

In general, (almost) all
.B geninfo
options can also be specified in your personal, group, project, or site
configuration file - see man
.B lcovrc(5)
for details.


.B \-b
.I directory
.br
.B \-\-base\-directory
.I directory
.br
.RS
.RI "Use " directory
as base directory for relative paths.

Use this option to specify the base directory of a build\-environment
when geninfo produces error messages like:

.RS
ERROR: could not read source file /home/user/project/subdir1/subdir2/subdir1/subdir2/file.c
.RE

In this example, use /home/user/project as base directory.

This option is required when using geninfo on projects built with libtool or
similar build environments that work with a base directory, i.e. environments,
where the current working directory when invoking the compiler is not the same
directory in which the source code file is located.

Note that this option will not work in environments where multiple base
directories are used. In that case use configuration file setting
.B geninfo_auto_base=1
(see man
.BR lcovrc (5)).
.RE

.B \-\-build\-directory
.I build_dir
.br
.RS
Search for .gcno data files from
.I build_dir
rather finding them only adjacent to the corresponding .o and/or .gcda file.

By default, geninfo expects to find the .gcno and .gcda files (compile-
and run-time data, respectively) in the same directory.
.br

When this option is used:
.br

.RS
geninfo path1 \-\-build\-directory path2 ...
.RE
.br

then geninfo will look for .gcno file
.br

.RS
path2/relative/path/to/da_base.gcno
.RE
.br

when it finds .gcda file
.br

.RS
path1/relative/path/to/da_base.gcda.
.RE

Use this option when you have used the
.I GCOV_PREFIX
environment variable to direct the gcc or llvm runtime environment to write
coverage data files to somewhere other than the directory where the code
was originally compiled.
See
.BR gcc (1)
and/or search for
.I GCOV_PREFIX
and
.I GCOV_PREFIX_STRIP.

This option can be used several times to specify multiple alternate directories to look for .gcno files.  This may be useful if your application uses code which is compiled in many separate locations - for example, common libraries that are shared between teams.

.RE
.BI "\-\-source\-directory " dirname
.RS
Add 'dirname' to the list of places to look for source files.
.br

For relative source file paths found in the gcov data \- possibly after substitutions have been applied,
.B geninfo
will first look for the path from 'cwd' (where genhtml was
invoked) and
then from each alternate directory name in the order specified.
The first location matching location is used.

This option can be specified multiple times, to add more directories to the source search path.
.RE

.B \-\-branch\-coverage
.br
.RS
Collect retain branch coverage data.

This is equivalent to using the option "\-\-rc branch_coverage=1"; the option was added to better match the genhml interface.

.RE

.B \-\-mcdc\-coverage
.br
.RS
Collect retain MC/DC data.

This is equivalent to using the option "\-\-rc mcdc_coverage=1".
MC/DC coverage capture is supported for GCC versions 14.2 and higher,
or LLVM versions 18.1 and higher.
.br
See
.I llvm2lcov \-\-help
for details on MC/DC data capture in LLVM.

.br
See the MC/DC section of man
.B genhtml(1)
for more details
.RE

.B \-\-checksum
.br
.B \-\-no\-checksum
.br
.RS
Specify whether to generate checksum data when writing tracefiles.

Use
.B \-\-checksum
to enable checksum generation or
.B \-\-no\-checksum
to disable it. Checksum generation is
.B disabled
by default.

When checksum generation is enabled, a checksum will be generated for each
source code line and stored along with the coverage data. This checksum will
be used to prevent attempts to combine coverage data from different source
code versions.

If you don't work with different source code versions, disable this option
to speed up coverage data processing and to reduce the size of tracefiles.

Note that this options is somewhat subsumed by the
.B \-\-version\-script
option - which does something similar, but at the 'whole file' level.

.RE

.B \-\-compat
.IR mode = value [, mode = value ,...]
.br
.RS
Set compatibility mode.

Use
.B \-\-compat
to specify that geninfo should enable one or more compatibility
modes when capturing coverage data. You can provide a comma-separated list
of mode=value pairs to specify the values for multiple modes.

Valid
.I values
are:

.B on
.RS
Enable compatibility mode.
.RE
.B off
.RS
Disable compatibility mode.
.RE
.B auto
.RS
Apply auto-detection to determine if compatibility mode is required. Note that
auto-detection is not available for all compatibility modes.
.RE

If no value is specified, 'on' is assumed as default value.

Valid
.I modes
are:

.B libtool
.RS
Enable this mode if you are capturing coverage data for a project that
was built using the libtool mechanism. See also
.BR \-\-compat\-libtool .

The default value for this setting is 'on'.

.RE
.B hammer
.RS
Enable this mode if you are capturing coverage data for a project that
was built using a version of GCC 3.3 that contains a modification
(hammer patch) of later GCC versions. You can identify a modified GCC 3.3
by checking the build directory of your project for files ending in the
extension .bbg. Unmodified versions of GCC 3.3 name these files .bb.

The default value for this setting is 'auto'.

.RE
.B split_crc
.RS
Enable this mode if you are capturing coverage data for a project that
was built using a version of GCC 4.6 that contains a modification
(split function checksums) of later GCC versions. Typical error messages
when running geninfo on coverage data produced by such GCC versions are
\'out of memory' and 'reached unexpected end of file'.

The default value for this setting is 'auto'
.RE

.RE

.B \-\-compat\-libtool
.br
.B \-\-no\-compat\-libtool
.br
.RS
Specify whether to enable libtool compatibility mode.

Use
.B \-\-compat\-libtool
to enable libtool compatibility mode or
.B \-\-no\-compat\-libtool
to disable it. The libtool compatibility mode is
.B enabled
by default.

When libtool compatibility mode is enabled, geninfo will assume that the source
code relating to a .gcda file located in a directory named ".libs" can be
found in its parent directory.

If you have directories named ".libs" in your build environment but don't use
libtool, disable this option to prevent problems when capturing coverage data.
.RE

.B \-\-config\-file
.I config\-file
.br
.RS
Specify a configuration file to use.
See the lcovrc man page for details of the file format and options.

When this option is specified, neither the system\-wide configuration file
/etc/lcovrc, nor the per\-user configuration file ~/.lcovrc is read.

This option may be useful when there is a need to run several
instances of
.B geninfo
with different configuration file options in parallel.

Note that this option must be specified in full - abbreviations are not supported.

.RE

.B \-\-profile
.I [ profile\-data\-file ]
.br
.RS
Tell the tool to keep track of performance and other configuration data.
If the optional
.I profile\-data\-file
is not specified, then the profile data is written to a file named with the same
basename as the
.I \-\-output\-filename, with suffix
.I ".json"
appended.

.RE


.B \-\-derive\-func\-data
.br
.RS
Calculate function coverage data from line coverage data.

Use this option to collect function coverage data, even if the version of the
gcov tool installed on the test system does not provide this data. lcov will
instead derive function coverage data from line coverage data and
information about which lines belong to a function.
.RE

.B \-\-external
.br
.B \-\-no\-external
.br
.RS
Specify whether to capture coverage data for external source files.

External source files are files which are not located in one of the directories
specified by
.I \-\-directory
or
.I \-\-base\-directory.
Use
.I \-\-external
to include
coverpoints in external source files while capturing coverage data or
.I \-\-no\-external
to exclude them.
If your
.I \-\-directory
or
.I \-\-base\-directory
path contains a soft link, then actual target directory is not considered to be
"internal" unless the
.I \-\-follow
option is used.

The
.I \-\-no\-external
option is somewhat of a blunt instrument;  the
.I \-\-exclude
and
.I \-\-include
options provide finer grained control over which coverage data is and is not
included if your project structure is complex and/or
.I \-\-no\-external
does not do what you want.

Data for external source files is
.B included
by default.
.RE

.B \-f
.br
.B \-\-follow
.RS
Follow links when searching .gcda files, as well as to decide whether a
particular (symbolically linked) source directory is "internal" to the project or not - see the
.I \-\-no\-external
option, above, for more information.
The
.I \-\-follow command line option is equivalent to the
.I geninfo_follow_symlinks
config file option.  See man
.B lcovrc(5) for more information.
.RE

.B \-\-gcov\-tool
.I tool
.br
.RS
Specify the location of the gcov tool.

If the
.B \-\-gcov\-tool
option is used multiple times, then the arguments are concatenated when the callback
is executed - similar to how the gcc
.B \-Xlinker
parameter works.  This provides a possibly easier way to pass arguments to
your tool, without requiring a wrapper script.
In that case, your callback will be executed as:
.I tool\-0 'tool\-1; ... 'filename'.
Note that the second and subsequent arguments are quoted when passed to
the shell, in order to handle parameters which contain spaces.

The
.B \-\-gcov\-tool
argument may be a
.I split_char
separated string - see
.B man(4) lcovrc.

A common use for this option is to enable LLVM:
.br

.RS
.BR "geninfo \-\-gcov-tool " "llvm-cov " "\-\-gcov-tool " "gcov ..."
.br
.BR "geninfo \-\-gcov-tool " "llvm-cov,gcov ..."
.RE
.br

Note: 'llvm-cov gcov da_file_name' will generate output in gcov-compatible format as required by lcov.

If not specified, 'gcov' is used by default.

.RE

.B \-h
.br
.B \-\-help
.RS
Print a short help text, then exit.
.RE

.B \-\-include
.I pattern
.br
.RS
Include source files matching
.IR pattern .

Use this switch if you want to include coverage data for only a particular set
of source files matching any of the given patterns. Multiple patterns can be
specified by using multiple
.B \-\-include
command line switches. The
.I patterns
will be interpreted as shell wildcard patterns (note that they may need to be
escaped accordingly to prevent the shell from expanding them first).

See the lcov man page for details

.RE

.B \-\-exclude
.I pattern
.br
.RS
Exclude source files matching
.IR pattern .

Use this switch if you want to exclude coverage data from a  particular set
of source files matching any of the given patterns. Multiple patterns can be
specified by using multiple
.B \-\-exclude
command line switches. The
.I patterns
will be interpreted as shell wildcard patterns (note that they may need to be
escaped accordingly to prevent the shell from expanding them first).
Note: The pattern must be specified to match the
.B absolute
path of each source file.

Can be combined with the
.B \-\-include
command line switch. If a given file matches both the include pattern and the
exclude pattern, the exclude pattern will take precedence.

See the lcov man page for details.

.RE

.B \-\-erase\-functions
.I regexp
.br
.RS
Exclude coverage data from lines which fall within a function whose name matches the supplied regexp.  Note that this is a mangled or demangled name, depending on whether the \-\-demangle\-cpp option is used or not.

Note that this option requires that you use a gcc version which is new enough to support function begin/end line reports or that you configure the tool to derive the required dta - see the
.BI derive_function_end_line
discussion in the
.B lcovrc
man page.


.RE

.B \-\-substitute
.I regexp_pattern
.br
.RS
Apply Perl regexp
.IR regexp_pattern
to source file names found during processing.  This is useful when the path name reported by gcov does not match your source layout and the file is not found. See the lcov man page for more details.

.RE

.B \-\-omit\-lines
.I regexp
.br
.RS
Exclude coverage data from lines whose content matches
.IR regexp .

Use this switch if you want to exclude line, branch, and MC/DC  coverage data for some particular constructs in your code (e.g., some complicated macro).
See the lcov man page for details.

.RE

.B \-\-forget\-test\-names
.br
.RS
If non\-zero, ignore testcase names in tracefile -
.I i.e.,
treat all coverage data as if it came from the same testcase.
This may improve performance and reduce memory consumption if user does
not need per-testcase coverage summary in coverage reports.

This option can also be configured permanently using the configuration file
option
.IR forget_testcase_names .
.RE

.B \-\-msg\-log
.I [ log_file_name ]
.br
.RS
Specify location to store error and warning messages (in addition to writing to STDERR).
If
.I log_file_name
is not specified, then default location is used.
.RE

.B \-\-ignore\-errors
.I errors
.br
.RS
Specify a list of errors after which to continue processing.

Use this option to specify a list of one or more classes of errors after which
.B geninfo
should continue processing instead of aborting.
Note that the tool will generate a warning (rather than a fatal error) unless you ignore the error two (or more) times:
.br
.RS
geninfo ... \-\-ignore\-errors unused,unused
.RE

.I errors
can be a comma\-separated list of the following keywords:

.IP branch: 3
branch ID (2nd field in the .info file 'BRDA' entry) does not follow expected integer sequence.
.PP

.IP callback: 3
Version script error.
.PP

.IP child: 3
child process returned non-zero exit code during
.I \-\-parallel
execution.  This typically indicates that the child encountered an error:  see the log file immediately above this message.
In contrast:  the
.B parallel
error indicates an unexpected/unhandled exception in the child process - not a 'typical' lcov error.
.PP

.IP corrupt: 3
corrupt/unreadable file found.
.PP

.IP count: 3
An excessive number of messages of some class have been reported - subsequent messages of that type will be suppressed.
The limit can be controlled by the 'max_message_count' variable. See the lcovrc man page.
.PP

.IP deprecated: 3
You are using a deprecated option.
This option will be removed in an upcoming release - so you should change your
scripts now.
.PP

.IP empty: 3
the .info data file is empty (e.g., because all the code was 'removed' or excluded.
.PP

.IP excessive: 3
your coverage data contains a suspiciously large 'hit' count which is unlikely
to be correct - possibly indicating a bug in your toolchain.

See the
.I excessive_count_threshold
section in man
.B lcovrc(5)
for details.
.PP

.IP fork: 3
Unable to create child process during
.I \-\-parallel
execution.
.br
If the message is ignored (
.I \-\-ignore\-errors fork
), then genhtml
will wait a brief period and then retry the failed execution.
.br
If you see continued errors, either turn off or reduce parallelism, set a memory limit, or find a larger server to run the task.
.PP

.IP format: 3
Unexpected syntax or value found in .info file - for example, negative number or
zero line number encountered.
.PP

.IP gcov: 3
the gcov tool returned with a non\-zero return code.
.PP

.IP graph: 3
the graph file could not be found or is corrupted.
.PP

.IP inconsistent: 3
your coverage data is internally inconsistent:  it makes two or more mutually
exclusive claims.  For example, some expression is marked as both an exception branch and not an exception branch.  (See man
.B genhtml(1)
for more details.

.IP internal: 3
internal tool issue detected.  Please report this bug along with a testcase.
.PP

.IP mismatch: 3
Incorrect information found in coverage data and/or source code - for example,
the source code contains overlapping exclusion directives.
.PP

.IP missing: 3
File does not exist or is not readable.
.PP

.IP negative: 3
negative 'hit' count found.

Note that negative counts may be caused by a known GCC bug - see

  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68080

and try compiling with "-fprofile-update=atomic". You will need to recompile, re-run your tests, and re-capture coverage data.
.PP

.IP package: 3
a required perl package is not installed on your system.  In some cases, it is possible to ignore this message and continue - however, certain features will be disabled in that case.
.PP

.IP parallel: 3
various types of errors related to parallelism -
.I i.e.,
a child process died due to an error.  The corresponding error message appears in the log file immediately before the
.I parallel
error.

If you see an error related to parallel execution that seems invalid, it may be a good idea to remove the \-\-parallel flag and try again.  If removing the flag leads to a different result, please report the issue (along with a testcase) so that the tool can be fixed.
.PP

.IP parent: 3
the parent process exited while child was active during
.I \-\-parallel
execution.  This happens when the parent has encountered a fatal error -
.I e.g.
an error in some other child which was not ignored.  This child cannot continue working without its parent - and so will exit.

.PP

.IP path: 3
some file paths were not resolved - e.g., .gcno file corresponding to
some .gcda was not found see
.I \-\-build\-directory
option for additional information.

.PP

.IP range: 3
Coverage data refers to a line number which is larger than the number of
lines in the source file.  This can be caused by a version mismatch or
by an issue in the
.I gcov
data.
.PP

.IP source: 3
the source code file for a data set could not be found.
.PP
`<
.IP unsupported: 3
the requested feature is not supported for this tool configuration.  For example, function begin/end line range exclusions use some GCOV features that are not available in older GCC releases.
.PP

.IP unused: 3
the include/exclude/erase/omit/substitute pattern did not match any file pathnames.
.PP

.IP usage: 3
unsupported usage detected - e.g. an unsupported option combination.
.PP

.IP utility: 3
a tool called during processing returned an error code (e.g., 'find' encountered an unreadable directory).
.PP

.IP version: 3
revision control IDs of the file which we are trying to merge are not the same - line numbering and other information may be incorrect.
.PP

Also see the
.I \-\-ignore\-errors
section in man
.B genhtml(1).
The description there may be more complete and/or more fully explained.

See man
.B lcovrc(5)
 for a discussion of the 'max_message_count' parameter which can be used to control the number of warnings which are emitted before all subsequent messages are suppressed.  This can be used to reduce log file volume.

.RE

.BI "\-\-expect\-message\-count message_type:expr[,message_type:expr]"
.RS
Give
.B geninfo
a constraint on the number of messages of one or more types which are expected to
be produced during execution.  If the constraint is not true, then generate an
error of type
.I "count"
(see above).

See man
.B genhtml(1)
for more details about the flag, as well as the
.I "expect_message_count"
section in man
.B lcovrc(5)
for a description of the equivalent configuration file option.
.RE

.BI "\-\-keep\-going "
.RS
Do not stop if error occurs: attempt to generate a result, however flawed.

This command line option corresponds to the
.I stop_on_error [0|1]
lcovrc option.   See man
.B lcovrc(5) for more details.

.RE

.BI "\-\-fail-under-lines "
.I percentage
.br
.RS
Use this option to tell geninfo to exit with a status of 1 if the total
line coverage is less than
.I percentage.
See
.B man lcov(1)
for more details.
.RE

.BI "\-\-preserve "
.RS
Preserve intermediate data files (e.g., for debugging).

By default, intermediate files are deleted.

.RE
.BI "\-\-filter "
.I filters
.RS
Specify a list of coverpoint filters to apply to input data.
See the genhtml man page for details.

.RE
.BI "\-\-demangle\-cpp " [param]
.RS
Demangle C++ method and function names in captured output.
See the genhtml man page for details.

.RE
.B \-i
.br
.B \-\-initial
.RS
Capture initial zero coverage data.

Run geninfo with this option on the directories containing .bb, .bbg or .gcno
files before running any test case. The result is a "baseline" coverage data
file that contains zero coverage for every instrumented line and function.
Combine this data file (using lcov \-a) with coverage data files captured
after a test run to ensure that the percentage of total lines covered is
correct even when not all object code files were loaded during the test.
Also see the
.I \-\-all
flag, below.

Note: the
.B \-\-initial
option is not supported for gcc versions less than 6, and does not generate branch coverage information for gcc versions less than 8.
.RE

.B \-\-all
.RS
Capture coverage data from both compile time (.gcno) data files which do not have corresponding runtime (.gcda) data files, as well as from those that
.I do
have corresponding runtime data.
There will be no runtime data unless some executable which links the corresponding object file has run to completion.

Note that the execution count of coverpoints found only in files which do not have any runtime data will be zero.

This flag is ignored if the
.I \-\-initial
flag is set.

Using the
.B \-\-all
flag is equivalent to executing both
.I geninfo --initial ...
and
.I geninfo  ...
and merging the result.

Also see the
.I geninfo_capture_all
entry in
.B man(5) lcovrc.

.RE


.B \-\-no\-markers
.br
.RS
Use this option if you want to get coverage data without regard to exclusion
markers in the source code file.
.RE

.B \-\-no\-recursion
.br
.RS
Use this option if you want to get coverage data for the specified directory
only without processing subdirectories.
.RE

.BI "\-o " output\-filename
.br
.BI "\-\-output\-filename " output\-filename
.RS
Write all data to
.IR output\-filename .

If you want to have all data written to a single file (for easier
handling), use this option to specify the respective filename. By default,
one tracefile will be created for each processed .gcda file.
.RE

.RE
.B \-\-context\-script
.I script
.br
.RS

Use
.I script
to collect additional tool execution context information - to aid in
infrastructure debugging and/or tracking.

See the genhtml man page for more details on the context script.

.br

.RE
.B \-\-criteria\-script
.I script
.br
.RS

Use
.I script
to test for coverage acceptance criteria.

See the genhtml man page for more details on the criteria script.
Note that geninfo does not keep track of date and owner information (see the
.I \-\-annotate\-script
entry in the genhtml man page) - so this information is not passed to the geninfo callback.

.br

.RE
.B \-\-resolve\-script
.I script
.br
.RS
Use
.I script
to find the file path for some source or GCNO file which appears in
an input data file if the file is not found after applying
.I \-\-substitute
patterns and searching the
.I \-\-source\-directory
or
.I \-\-build\-directory
list.

This option is equivalent to the
.B resolve_script
config file option.
.br
In addition, the
.I geninfo_follow_path_links
config file option can be used to resolve source paths to their actual
target.

See man
.B lcovrc(5)
for details.
.RE

.RE
.B \-\-version\-script
.I script
.br
.RS
Use
.I script
to get a source file's version ID from revision control when
extracting data. The ID is used for error checking when merging .info files.
.br

See the genhtml man page for more details on the version script.


.B \-v
.br
.B \-\-verbose
.RS
Increment informational message verbosity.  This is mainly used for script and/or flow debugging - e.g., to figure out which data file are found, where.
Also see the
.B \-\-quiet
flag.

Messages are sent to stdout unless there is no output file (i.e., if the coverage data is written to stdout rather than to a file) and to stderr otherwise.

.RE
.B \-q
.br
.B \-\-quiet
.RS
Decrement informational message verbosity.

Decreased verbosity will suppress 'progress' messages for example - while error and warning messages will continue to be printed.

.RE
.B \-\-debug
.RS
Increment 'debug messages' verbosity.  This is useful primarily to developers who want to enhance the lcov tool suite.

.RE
.B \-\-comment comment_string
.RS
Append
.I comment_string
to list of comments emitted into output result file.
This option may be specified multiple times.
Comments are printed at the top of the file, in the order they were specified.

Comments can be useful to document the conditions under which the trace file was
generated:  host, date, environment,
.I etc.


.RE

.BI "\-\-parallel "
.I [ integer ]
.br
.BI "\-j "
.I [ integer ]
.RS
Specify parallelism to use during processing (maximum number of forked child processes).  If the optional integer parallelism parameter is zero or is missing, then use to use up the number of cores on the machine.  Default is not to use a single process (no parallelism).

Also see the
.I memory, memory_percentage, max_fork_fails, fork_fail_timeout, geninfo_chunk_size
and
.I geninfo_interval_update
entries in man
.B lcovrc(5)
for a description of some options which may aid in parameter tuning and performance optimization.

.RE
.BI "\-\-memory "
.I integer
.RS
Specify the maximum amount of memory to use during parallel processing, in Mb.  Effectively, the process will not fork() if this limit would be exceeded.  Default is 0 (zero) - which means that there is no limit.

This option may be useful if the compute farm environment imposes strict limits on resource utilization such that the job will be killed if it tries to use too many parallel children - but the user does now know a priori what the permissible maximum is.  This option enables the tool to use maximum parallelism - up to the limit imposed by the memory restriction.

The configuration file
.I memory_percentage
option provided another way to set the maximum memory consumption.
See man
.B lcovrc(5)
for details.

.RE

.B \-\-rc
.IR keyword = value
.br
.RS
Override a configuration directive.

Use this option to specify a
.IR keyword = value
statement which overrides the corresponding configuration statement in
the lcovrc configuration file. You can specify this option more than once
to override multiple configuration statements.
See man
.BR lcovrc (5)
for a list of available keywords and their meaning.
.RE

.BI "\-t " testname
.br
.BI "\-\-test\-name " testname
.RS
Use test case name
.I testname
for resulting data. Valid test case names can consist of letters, decimal
digits and the underscore character ('_').

This proves useful when data from several test cases is merged (i.e. by
simply concatenating the respective tracefiles) in which case a test
name can be used to differentiate between data from each test case.
.RE

.B \-\-version
.RS
Print version number, then exit.
.RE

.B \-\-tempdir
.I dirname
.br
.RS
Write temporary and intermediate data to indicated directory.  Default is "/tmp".
.RE


.SH "TRACEFILE FORMAT"

Following is a quick description of the tracefile format as used by
.BR genhtml ", " geninfo " and " lcov .

A tracefile is made up of several human\-readable lines of text,
divided into sections.  If the
.BI "--\-comment\ comment_string"
option is supplied, then

.RS
 #comment_string
.RE
will appear at the top of the tracefile.  There is no space before or after the
.I #
character.


If available, a tracefile begins with the
.I testname
which is stored in the following format:

.RS
TN:<test name>
.RE

For each source file referenced in the .gcda file, there is a section containing
filename and coverage data:

.RS
SF:<path to the source file>
.RE

An optional source code version ID follows:
.br

.RS
VER:<version ID>
.RE

If present, the version ID is compared before file entries are merged (see
.B "lcov \-\-add\-tracefile"
), and before the 'source detail' view is generated by genhtml.
See the
.BI "\-\-version\-script " callback_script
documentation and the sample usage in the lcov regression test examples.

Function coverage data follows.
Note that the format of the function coverage data has changed from LCOV 2.2 onward.
The tool continues to be able to read the old format but now writes only the
new format.
This change was made so that
.B function
filter outcome is persistent in the generated tracefile.

Functions and their aliases are recorded contiguously:

First, the leader:

.RS
FNL:<index>,<line number of function start>[,line number of function end>]
.RE

Then the aliases of the function; there will be at least one alias.  All aliases of a particular function share the same index.

.RS
FNA:<index>,<execution count>,<name>
.RE


The now-obsolete function data format is:

.RS

.RS
FN:<line number of function start>,[<line number of function end>,]<function name>
.RE

The 'end' line number is optional, and is generated only if the compiler/toolchain
version is recent enough to generate the data (e.g., gcc 9 or newer).
This data is used to support the
.B \-\-erase\-functions
and
.B \-\-show\-proportions
options.  If the function end line data is not available, then these features will not work.

Next, there is a list of execution counts for each instrumented function:

.RS
FNDA:<execution count>,<function name>
.RE
.RE

This list is followed by two lines containing the number of functions found
and hit:

.RS
FNF:<number of functions found>
.br
FNH:<number of function hit>
.RE

Note that, as of LCOV 2.2, these numbers count function groups - not the individual aliases.

Branch coverage information is stored one line per branch:

.RS
BRDA:<line_number>,[<exception>]<block>,<branch>,<taken>
.RE

.I <line_number>
is the line number where the branch is found - and is expected to be a non-zero integer.
.br
.I <block>
and
.I <branch>
serve to uniquely define a particular edge in the expression tree of a particular conditional found on the associated line.
.br
Within a particular line,
.I <block>
is an integer numbered from zero with no gaps. For some languages and some coding styles, there will only be one block (index value zero) on any particular line.
.br
.I <branch>
is a string which serves to uniquely identify a particular edge.  For some languages and tools - e.g., C/C++ code compiled with gcc or llvm -
.I <branch>
is an ordered integer index related to expression tree traversal order of the associated conditional.  For others, it may be a meaningful string - see below.
.I <branch>
appears in the 'tooltip' popup of the associated branch in the
.B genhtml
output - so human-readable values are helpful to users who are trying to understand coverage results - for example, in order to develop additional regression tests, to improve coverage.
.br
.I <taken>
is either '-' if the corresponding expression was never evaluated (e.g., the basic block containing the branch was never executed) or
a number indicating how often that branch was taken.
.br
.I <exception>
is 'e' (single character) if this is a branch related to exception handling - and is not present if the branch is not related to exceptions.
Exception branch identification requires compiler support; note that gcc versions older than 9 do not differentiate exception branches.  Geninfo will be able to identify exception branches only if your toolchain version is new enough to support the feature.

The following are example branch records whose
.I <branch>
expression values are human-readable strings.

.RS
  BRDA:10,0,enable,1
.br
  BRDA:10,0,!enable,0
.RE
In this case, the corresponding code from line 10 is very likely similar to:
.br
.RS
   if (enable) {
.br
     ...
.br
   }
.br
.RE
such that the associated testcase entered the block ('enable' evaluated to 'true').

Arbitrarily complicated branch expressions are supported - including branch expressions which contain commas (
.I e.g.,
 in an expression containing a function call).

Note that particular tools may or may not suppress expressions which are statically true or statically false -
.I e.g.,
expressions using template parameters.
This makes it potentially complicated to compare coverage data generated by two different tools.


Branch coverage summaries are stored in two lines:

.RS
BRF:<number of branches found>
.br
BRH:<number of branches hit>
.RE

MC/DC information is stored one line per expression:

.RS
MCDC:<line_number>,<groupSize>,<sense>,<taken>,<index>,<expression>
.RE
where:

.I <line_number>
is the line number where the condition is found - and is expected to be a non-zero integer.
.br
.I <groupSize>
and
.I <index>
serve to uniquely define a particular element in the expression tree of a particular conditional found on the associated line.
.br
Within a particular line and group,
.I <index>
is an integer numbered from zero to
.I <groupSize> - 1
with no gaps. For some languages and some coding styles, there will only be one group on any particular line.

.I <sense>
is either
.I "f"
or
.I "t",
indicating whether the condition is sensitive to the indicated change - that is, does the condition outcome change if the corresponding changes from 'false' to 'true' or from 'tru' to 'false, respectively.


.I <taken>
is a count - 0 (zero) if the expression was not senstized, non-zero if it was senstized.
Note that tome tools may treat
.I <taken>
as the number of times that the expression was sensitized where others may treat it
as a boolean - 1:sensitized or 0: not sensitized.

.I <expression>
is an arbitrary string, intended to be a meaningful string which will help the user to understand the condition context - see below.
.I <expression>
appears in the 'tooltip' popup of the associated MC/DC condition in the
.B genhtml
output - so human-readable values are helpful to users who are trying to understand coverage results - for example, in order to develop additional regression tests, to improve coverage.
.br
For a given <groupSize> and <index>, the <expression> should be identical for both
"t" and "f" senses.


The following are example MC/DC records whose
.I <expression>
values are human-readable strings.

.RS
  MCDC:10,2,f,0,0,enable
.br
  MCDC:10,2,t,1,0,enable
.br
  ...
.RE
In this case, the corresponding code from line 10 is very likely similar to:
.br
.RS
   if (enable ...) {
.br
     ...
.br
   }
.br
.RE
such that the associated testcase was sensitive to a change of 'enable' from true to false (but not the converse).

Arbitrarily complicated expressions are supported - including expressions which contain commas (
.I e.g.,
 in an expression containing a function call).

Note that particular tools may or may not suppress expressions which are statically true or statically false -
.I e.g.,
expressions using template parameters.
This makes it potentially complicated to compare coverage data generated by two different tools.


MCDC coverage summaries are stored in two lines:

.RS
MRF:<number of conditions found>
.br
MRH:<number of condition hit>
.RE


Then there is a list of execution counts for each instrumented line
(i.e. a line which resulted in executable code):

.RS
DA:<line number>,<execution count>[,<checksum>]
.RE

Note that there may be an optional checksum present for each instrumented
line. The current
.B geninfo
implementation uses an MD5 hash as checksumming algorithm.

At the end of a section, there is a summary about how many lines
were found and how many were actually instrumented:

.RS
LH:<number of lines with a non\-zero execution count>
.br
LF:<number of instrumented lines>
.RE

Each sections ends with:

.RS
end_of_record
.RE

In addition to the main source code file there are sections for all
#included files which also contain executable code.

Note that the absolute path of a source file is generated by interpreting
the contents of the respective .gcno file (see
.BR "gcov " (1)
for more information on this file type). Relative filenames are prefixed
with the directory in which the .gcno file is found.

Note also that symbolic links to the .gcno file will be resolved so that the
actual file path is used instead of the path to a link. This approach is
necessary for the mechanism to work with the /proc/gcov files.


.SH FILES

.I /etc/lcovrc
.RS
The system\-wide configuration file.
.RE

.I ~/.lcovrc
.RS
The per\-user configuration file.
.RE

.I \*[scriptdir]/getp4version
.RS
Sample script for use with
.B --version-script
that obtains version IDs via Perforce.
.br
.RE

.I \*[scriptdir]/get_signature
.RS
Sample script for use with
.B --version-script
that uses md5hash as version IDs.
.br
.RE


.SH AUTHOR
Peter Oberparleiter <Peter.Oberparleiter@de.ibm.com>

Henry Cox <henry.cox@mediatek.com>
.RS
Filtering, error management, parallel execution sections.
.RE

.SH SEE ALSO
.BR lcov (1),
.BR lcovrc (5),
.BR genhtml (1),
.BR genpng (1),
.BR gendesc (1),
.BR gcov (1)
.br

.I \*[lcovurl]
.br
